# Copyright (c) 2025 Jo√£o Carlos Chavatte (DEV Chavatte)
#
# This code is part of the ParrotOS-WSL Installer project.
# It is licensed under the MIT License.
# See LICENSE file for details.

function Install-ParrotWSL {
  [CmdletBinding()]
  param(
    [Parameter(Mandatory = $true)]
    [string]$RootFSPath,

    [string]$DistroName = "ParrotOS",

    [string]$InstallPath = "$env:SystemDrive\WSL_Distros\ParrotOS"
  )

  Write-Host "`n=== ‚öôÔ∏è INSTALANDO PARROT OS NO WSL2 === " -ForegroundColor Cyan

  Write-Host "‚ÑπÔ∏è Verificando arquivo rootfs..." -ForegroundColor Yellow
  if (-not (Test-Path $RootFSPath)) {
    Write-Host "üõë ERRO: Arquivo rootfs n√£o encontrado em: $RootFSPath" -ForegroundColor Red
    exit 1
  }
  Write-Host "‚úÖ Arquivo rootfs encontrado: $(Split-Path $RootFSPath -Leaf)" -ForegroundColor Green

  Write-Host "‚ÑπÔ∏è Verificando diret√≥rio de instala√ß√£o..." -ForegroundColor Yellow
  if (-not (Test-Path $InstallPath)) {
    try {
      Write-Host "üõ†Ô∏è Criando diret√≥rio de instala√ß√£o em: $InstallPath" -ForegroundColor Yellow
      New-Item -ItemType Directory -Path $InstallPath -Force | Out-Null
      Write-Host "‚úÖ Diret√≥rio de instala√ß√£o criado: $InstallPath" -ForegroundColor Green
    }
    catch {
      Write-Host "üõë ERRO: Falha ao criar diret√≥rio de instala√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
      exit 1
    }
  }
  else {
    Write-Host "‚úÖ Diret√≥rio de instala√ß√£o j√° existe: $InstallPath" -ForegroundColor Green
  }

  Write-Host "‚ÑπÔ∏è Verificando se a distribui√ß√£o '$DistroName' j√° existe..." -ForegroundColor Yellow
  $existingDistros = wsl --list --quiet
  if ($existingDistros -contains $DistroName) {
    Write-Host "‚ö†Ô∏è AVISO: A distribui√ß√£o '$DistroName' j√° est√° instalada." -ForegroundColor Yellow
    
    $choiceUser = $null
    while ($choiceUser -notmatch '^[sSnN]$') {
      $choiceUser = Read-Host "‚ùì Deseja reinstalar? (Isso remover√° a instala√ß√£o existente) [S/N]"
      if ($choiceUser -notmatch '^[sSnN]$') {
        Write-Host "‚ö†Ô∏è Op√ß√£o inv√°lida. Por favor, digite 'S' para Sim ou 'N' para N√£o." -ForegroundColor Yellow
      }
    }

    if ($choiceUser -notmatch '^[sS]') {
      Write-Host "‚ÑπÔ∏è Instala√ß√£o cancelada pelo usu√°rio." -ForegroundColor Yellow
      exit 0
    }
    
    try {
      Write-Host "üõ†Ô∏è Removendo instala√ß√£o existente ($DistroName)..." -ForegroundColor Yellow
      wsl --unregister $DistroName
      if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ö†Ô∏è AVISO PS: 'wsl --unregister $DistroName' retornou o c√≥digo de sa√≠da: $LASTEXITCODE." -ForegroundColor Yellow
        Write-Host "   Isso pode ser normal se a distro n√£o puder ser interrompida imediatamente ou j√° foi parcialmente removida." -ForegroundColor Yellow
        Write-Host "   Prosseguindo com a tentativa de importa√ß√£o..." -ForegroundColor Yellow
      }
      else {
        Write-Host "‚úÖ Distribui√ß√£o $DistroName desregistrada com sucesso (ou n√£o estava totalmente registrada)." -ForegroundColor Green
      }
      Start-Sleep -Seconds 3 
    }
    catch {
      Write-Host "üõë ERRO PS: Exce√ß√£o ao tentar remover instala√ß√£o existente: $($_.Exception.Message)" -ForegroundColor Red
      exit 1
    }
  }

  try {
    Write-Host "‚è≥ Importando Parrot OS (isso pode levar alguns minutos)..." -ForegroundColor Yellow
    wsl --import $DistroName $InstallPath $RootFSPath --version 2
    if ($LASTEXITCODE -ne 0) {
      Write-Host "üõë ERRO PS: Falha ao executar 'wsl --import'. C√≥digo de sa√≠da: $LASTEXITCODE" -ForegroundColor Red
      exit 1
    }
    Write-Host "‚úÖ Parrot OS importado com sucesso!" -ForegroundColor Green
  }
  catch {
    Write-Host "üõë ERRO PS: Exce√ß√£o durante a importa√ß√£o da distribui√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
  }

  try {
    Write-Host "`n=== üë§ CONFIGURANDO USU√ÅRIO PADR√ÉO === " -ForegroundColor Cyan
    
    $defaultUserSuggestion = ($env:USERNAME -replace '[^a-zA-Z0-9]', '').ToLower()
    if ([string]::IsNullOrWhiteSpace($defaultUserSuggestion)) { $defaultUserSuggestion = "parrotuser" }
    
    $userName = ""
    while ([string]::IsNullOrWhiteSpace($userName) -or $userName -match '[^a-zA-Z0-9_]') {
      $userName = Read-Host "‚ùì Digite o nome de usu√°rio para o Parrot OS (letras, n√∫meros, underscore) [padr√£o: $defaultUserSuggestion]"
      if ([string]::IsNullOrWhiteSpace($userName)) { $userName = $defaultUserSuggestion }
      if ($userName -match '[^a-zA-Z0-9_]') {
        Write-Host "‚ö†Ô∏è Nome de usu√°rio inv√°lido. Use apenas letras, n√∫meros e underscore (_)." -ForegroundColor Yellow
      }
    }
    
    $plainPassword = ""
    while ($true) {
      $passwordInput = Read-Host "‚ùì Digite a senha para o usu√°rio '$userName'" -AsSecureString
      if ($passwordInput.Length -eq 0) {
        Write-Host "‚ö†Ô∏è A senha n√£o pode estar vazia. Tente novamente." -ForegroundColor Yellow
        continue
      }
      $bstr = [System.IntPtr]::Zero
      try {
        $bstr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($passwordInput)
        $plainPassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($bstr)
      }
      finally {
        if ($bstr -ne [System.IntPtr]::Zero) {
          [System.Runtime.InteropServices.Marshal]::ZeroFreeBSTR($bstr)
        }
      }
      if ([string]::IsNullOrWhiteSpace($plainPassword)) {
        Write-Host "‚ö†Ô∏è A senha fornecida resultou em um valor vazio ou inv√°lido ap√≥s convers√£o. Tente novamente." -ForegroundColor Yellow
        $passwordInput.Dispose()
        continue
      }
      $passwordInput.Dispose()
      break 
    }
    
    Write-Host "‚è≥ Configurando usu√°rio e ambiente (isso pode levar alguns minutos)..." -ForegroundColor Yellow
    
    $functionScriptPath = $MyInvocation.MyCommand.ScriptBlock.File

    if ([string]::IsNullOrWhiteSpace($functionScriptPath)) {
      Write-Host "üõë ERRO PS: N√£o foi poss√≠vel determinar o caminho do script da fun√ß√£o via \$MyInvocation.MyCommand.ScriptBlock.File." -ForegroundColor Red
      exit 1
    }

    $ScriptDirectory = Split-Path $functionScriptPath -ErrorAction Stop
    if ([string]::IsNullOrWhiteSpace($ScriptDirectory)) {
      Write-Host "üõë ERRO PS: N√£o foi poss√≠vel determinar o diret√≥rio do script da fun√ß√£o (ScriptDirectory est√° vazio ou nulo)." -ForegroundColor Red
      exit 1
    }
    
    $bashScriptFileName = "configure_parrot_internal.sh"
    $bashScriptPath = Join-Path (Split-Path $ScriptDirectory -Parent) "Bash" $bashScriptFileName
    

    if ([string]::IsNullOrWhiteSpace($bashScriptPath)) {
      Write-Host "üõë ERRO PS: Caminho para o script Bash interno (\$bashScriptPath) est√° vazio ou nulo AP√ìS Join-Path." -ForegroundColor Red
      exit 1
    }

    if (-not (Test-Path $bashScriptPath -PathType Leaf)) {
      Write-Host "üõë ERRO PS: Script de configura√ß√£o interna do Bash ('$bashScriptFileName') N√ÉO ENCONTRADO ou n√£o √© um arquivo em: '$bashScriptPath'" -ForegroundColor Red
      Write-Host "   Verifique se o arquivo '$bashScriptFileName' existe em '$(Split-Path $bashScriptPath -Parent)'." -ForegroundColor Yellow
      exit 1
    }

    try {
      $wslCommandsTemplate = Get-Content -Path $bashScriptPath -Raw -ErrorAction Stop
    }
    catch {
      Write-Host "üõë ERRO PS: Falha ao ler o arquivo de script Bash '$bashScriptPath'. Exce√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
      exit 1
    }
    
    $wslCommands = $wslCommandsTemplate -replace '__USERNAME_PLACEHOLDER__', $userName -replace '__PASSWORD_PLACEHOLDER__', $plainPassword
                                     
    $unixWslCommands = $wslCommands -replace "`r`n", "`n" -replace "`r", "`n"
    
    if ($unixWslCommands.Length -gt 0 -and $unixWslCommands[0] -eq [char]0xFEFF) {
      $unixWslCommands = $unixWslCommands.Substring(1)
    } 

    $psi = New-Object System.Diagnostics.ProcessStartInfo
    $psi.FileName = "wsl.exe"
    $psi.Arguments = "-d $DistroName -- bash -s" 
    $psi.UseShellExecute = $false
    $psi.RedirectStandardInput = $true
    $psi.RedirectStandardOutput = $true
    $psi.RedirectStandardError = $true
    $psi.CreateNoWindow = $true 
    $psi.StandardInputEncoding = [System.Text.UTF8Encoding]::new($false)
    $psi.StandardOutputEncoding = [System.Text.UTF8Encoding]::new($false)
    $psi.StandardErrorEncoding = [System.Text.UTF8Encoding]::new($false)

    $process = New-Object System.Diagnostics.Process
    $process.StartInfo = $psi
    
    try {
      if (-not ($process.Start())) {
        Write-Host "üõë ERRO PS: Falha ao iniciar o processo wsl.exe (Start() retornou false)." -ForegroundColor Red
        exit 1
      }
    }
    catch {
      Write-Host "üõë ERRO PS: Exce√ß√£o ao tentar iniciar o processo wsl.exe. $($_.Exception.Message)" -ForegroundColor Red
      exit 1
    }

    $inputStream = $process.StandardInput
    $inputStream.Write($unixWslCommands)
    $inputStream.Close() 

    $wslExecutionOutput = $process.StandardOutput.ReadToEnd()
    $wslErrorOutput = $process.StandardError.ReadToEnd()
    
    $process.WaitForExit() 
    $wslExitCode = $process.ExitCode 
    $process.Close() 

    $bashScriptFailed = $false
    if ($wslExitCode -ne 0) {
      $bashScriptFailed = $true
      Write-Host "üõë ERRO PS: O script de configura√ß√£o dentro do WSL falhou com o c√≥digo de sa√≠da: $wslExitCode." -ForegroundColor Red
    }
    if (($wslExecutionOutput -match "ERRO BASH:") -or ($wslErrorOutput -match "ERRO BASH:")) {
      $bashScriptFailed = $true
      Write-Host "‚ö†Ô∏è AVISO PS: Foram detectados 'ERRO BASH:' na sa√≠da do script de configura√ß√£o do WSL." -ForegroundColor Yellow
    }

    if ($bashScriptFailed) {
      Write-Host "--- üìú Sa√≠da da Execu√ß√£o do Script WSL (STDOUT) ---"
      if (-not [string]::IsNullOrWhiteSpace($wslExecutionOutput)) {
        $wslExecutionOutput.Split([Environment]::NewLine) | ForEach-Object { Write-Host $_ }
      }
      else {
        Write-Host "(Nenhuma sa√≠da padr√£o)"
      }
        
      if (-not [string]::IsNullOrWhiteSpace($wslErrorOutput)) {
        Write-Host "--- ‚ö†Ô∏è Sa√≠da de Erro da Execu√ß√£o do Script WSL (STDERR) ---" -ForegroundColor Yellow
        $wslErrorOutput.Split([Environment]::NewLine) | ForEach-Object { Write-Host $_ -ForegroundColor Yellow }
      }
      Write-Host "--- Fim da Sa√≠da da Execu√ß√£o ---"
    }
    
    Write-Host "‚úÖ Configura√ß√£o de usu√°rio (etapa WSL) processada." -ForegroundColor Green
  }
  catch {
    Write-Host "üõë ERRO FATAL PowerShell: Falha ao configurar usu√°rio (exce√ß√£o PowerShell): $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   Stack Trace: $($_.ScriptStackTrace)" -ForegroundColor DarkGray
    exit 1
  }

  try {
    Write-Host "`n‚è≥ Reiniciando a distribui√ß√£o '$DistroName' para aplicar configura√ß√µes de usu√°rio..." -ForegroundColor Yellow
    wsl --terminate $DistroName
    Start-Sleep -Seconds 5 
    Write-Host "‚úÖ Distribui√ß√£o '$DistroName' reiniciada." -ForegroundColor Green
  }
  catch {
    Write-Host "‚ö†Ô∏è AVISO: Falha ao tentar reiniciar a distribui√ß√£o '$DistroName': $($_.Exception.Message)" -ForegroundColor Yellow
  }

  try {
    Write-Host "`n=== üîç VERIFICA√á√ÉO FINAL === " -ForegroundColor Cyan
    
    $testUserOutput = wsl -d $DistroName -- whoami 2>&1 
    $wslExitCodeWhoami = $LASTEXITCODE

    if ($wslExitCodeWhoami -eq 0 -and ($testUserOutput.Trim() -eq $userName)) {
      Write-Host "üéâ Parrot OS instalado e configurado com sucesso!" -ForegroundColor Green
      Write-Host "‚úÖ Nome da distribui√ß√£o: $DistroName" -ForegroundColor Green
      Write-Host "‚úÖ Diret√≥rio de instala√ß√£o: $InstallPath" -ForegroundColor Green
      Write-Host "‚úÖ Usu√°rio padr√£o: $userName" -ForegroundColor Green
    }
    else {
      Write-Host "‚ö†Ô∏è AVISO: A verifica√ß√£o do usu√°rio padr√£o falhou ou retornou um usu√°rio inesperado." -ForegroundColor Yellow
      Write-Host "   Resultado esperado para 'whoami': '$userName'" -ForegroundColor Yellow
      Write-Host "   Resultado obtido: '$($testUserOutput.Trim())' (C√≥digo de sa√≠da de whoami: $wslExitCodeWhoami)" -ForegroundColor Yellow
      Write-Host "   Pode ser necess√°rio iniciar a distribui√ß√£o manualmente uma vez (`wsl -d $DistroName`) para que /etc/wsl.conf tenha efeito." -ForegroundColor Yellow
      if ($bashScriptFailed) {
        Write-Host "   Isso pode estar relacionado a erros durante a execu√ß√£o do script de configura√ß√£o interna do WSL." -ForegroundColor Yellow
      }
    }
  }
  catch {
    Write-Host "‚ö†Ô∏è AVISO: N√£o foi poss√≠vel completar a verifica√ß√£o final: $($_.Exception.Message)" -ForegroundColor Yellow
  }
}