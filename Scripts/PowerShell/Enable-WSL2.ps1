# Copyright (c) 2025 Jo√£o Carlos Chavatte (DEV Chavatte)
#
# This code is part of the ParrotOS-WSL Installer project.
# It is licensed under the MIT License.
# See LICENSE file for details.

function Enable-WSL2 {
  [CmdletBinding()]
  param()

  Write-Host "`n=== ‚öôÔ∏è VERIFICANDO PR√â-REQUISITOS DO WSL2 === " -ForegroundColor Cyan

  $osInfo = Get-ComputerInfo | Select-Object OsName, OsVersion, OsArchitecture
  $buildNumber = [System.Environment]::OSVersion.Version.Build

  Write-Host "‚ÑπÔ∏è Verificando compatibilidade do sistema operacional..." -ForegroundColor Yellow
  if ($buildNumber -lt 19041) {
    Write-Host "üõë ERRO: Seu Windows ($($osInfo.OsName) - Build $buildNumber) n√£o suporta WSL2." -ForegroundColor Red
    Write-Host "‚ÑπÔ∏è √â necess√°rio Windows 10 vers√£o 2004 (build 19041) ou superior, ou Windows 11." -ForegroundColor Yellow
    exit 1
  }
  Write-Host "‚úÖ Sistema operacional compat√≠vel detectado: $($osInfo.OsName) (Build $buildNumber)" -ForegroundColor Green

  try {
    Write-Host "‚ÑπÔ∏è Verificando status dos recursos 'VirtualMachinePlatform' e 'Microsoft-Windows-Subsystem-Linux'..." -ForegroundColor Yellow
    $vmEnabled = (Get-WindowsOptionalFeature -Online -FeatureName "VirtualMachinePlatform").State -eq "Enabled"
    $wslEnabled = (Get-WindowsOptionalFeature -Online -FeatureName "Microsoft-Windows-Subsystem-Linux").State -eq "Enabled"
        
    if (-not $vmEnabled -or -not $wslEnabled) {
      Write-Host "üõ†Ô∏è Habilitando recursos necess√°rios do Windows ('VirtualMachinePlatform', 'Microsoft-Windows-Subsystem-Linux')..." -ForegroundColor Yellow
      Write-Host "‚ö†Ô∏è Isso pode exigir uma reinicializa√ß√£o do sistema." -ForegroundColor Yellow
      Write-Host "‚è≥ O processo pode demorar alguns minutos." -ForegroundColor Yellow
      
      if (-not $vmEnabled) {
        Write-Host "üõ†Ô∏è Habilitando 'VirtualMachinePlatform'..." -ForegroundColor Yellow
        Enable-WindowsOptionalFeature -Online -FeatureName "VirtualMachinePlatform" -NoRestart -ErrorAction Stop | Out-Null
        Write-Host "‚úÖ 'VirtualMachinePlatform' habilitado." -ForegroundColor Green
      }
      else {
        Write-Host "‚úÖ 'VirtualMachinePlatform' j√° est√° habilitado." -ForegroundColor Green
      }

      if (-not $wslEnabled) {
        Write-Host "üõ†Ô∏è Habilitando 'Microsoft-Windows-Subsystem-Linux'..." -ForegroundColor Yellow
        Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Windows-Subsystem-Linux" -NoRestart -ErrorAction Stop | Out-Null
        Write-Host "‚úÖ 'Microsoft-Windows-Subsystem-Linux' habilitado." -ForegroundColor Green
      }
      else {
        Write-Host "‚úÖ 'Microsoft-Windows-Subsystem-Linux' j√° est√° habilitado." -ForegroundColor Green
      }
            
      Write-Host "‚úÖ Recursos habilitados com sucesso. Uma reinicializa√ß√£o √© necess√°ria para aplicar todas as altera√ß√µes." -ForegroundColor Green
      Write-Host "‚ÑπÔ∏è Voc√™ pode reiniciar agora ou mais tarde." -ForegroundColor Yellow
      
      $choice = $null
      while ($choice -notmatch '^[sSnN]$') {
        $choice = Read-Host "‚ùì Deseja reiniciar o computador agora? (S/N)"
        if ($choice -notmatch '^[sSnN]$') {
          Write-Host "‚ö†Ô∏è Op√ß√£o inv√°lida. Por favor, digite 'S' para Sim ou 'N' para N√£o." -ForegroundColor Yellow
        }
      }

      if ($choice -match '^[sS]') {
        Write-Host "‚è≥ Reiniciando o computador..." -ForegroundColor Yellow
        Restart-Computer -Force
      }
      else {
        Write-Host "‚ÑπÔ∏è Voc√™ precisar√° reiniciar manualmente para continuar a instala√ß√£o e para que as altera√ß√µes tenham efeito." -ForegroundColor Yellow
        exit 0
      }
    }
    else {
      Write-Host "‚úÖ Recursos 'VirtualMachinePlatform' e 'Microsoft-Windows-Subsystem-Linux' j√° est√£o habilitados." -ForegroundColor Green
    }
  }
  catch {
    Write-Host "üõë ERRO: Falha ao habilitar recursos do WSL: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
  }

  try {
    Write-Host "`n=== ‚öôÔ∏è CONFIGURANDO WSL2 === " -ForegroundColor Cyan

    $wslInstalled = $false
    try {
      $null = wsl --status 2>$null
      $wslInstalled = $?
    }
    catch {
      $wslInstalled = $false
    }

    if (-not $wslInstalled) {
      Write-Host "‚ÑπÔ∏è Componentes principais do WSL n√£o encontrados ou kernel ausente." -ForegroundColor Yellow
      Write-Host "üõ†Ô∏è Instalando componentes e kernel do WSL2..." -ForegroundColor Yellow
      Write-Host "‚è≥ Isso pode demorar alguns minutos." -ForegroundColor Yellow
      Write-Host "‚ÑπÔ∏è Para mais informa√ß√µes, acesse: https://aka.ms/wsl2kernel" -ForegroundColor Yellow
      wsl --install --no-distribution | Out-Null
      if ($LASTEXITCODE -ne 0) {
        Write-Host "üõë ERRO: Falha ao executar 'wsl --install --no-distribution'. C√≥digo: $LASTEXITCODE" -ForegroundColor Red
        Write-Host "‚ÑπÔ∏è Pode ser necess√°rio reiniciar o computador se os recursos foram habilitados na etapa anterior." -ForegroundColor Yellow
        exit 1
      }
      Write-Host "‚úÖ Componentes e kernel do WSL2 instalados." -ForegroundColor Green
    }
    else {
      Write-Host "‚ÑπÔ∏è WSL j√° detectado. Verificando atualiza√ß√µes do kernel..." -ForegroundColor Yellow
      Write-Host "üõ†Ô∏è Atualizando componentes do WSL (incluindo o kernel, se necess√°rio)..." -ForegroundColor Yellow
      Write-Host "‚è≥ Isso pode demorar alguns minutos." -ForegroundColor Yellow
      wsl --update | Out-Null
      if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ö†Ô∏è AVISO: 'wsl --update' retornou o c√≥digo $LASTEXITCODE. Tentando prosseguir." -ForegroundColor Yellow
      }
      else {
        Write-Host "‚úÖ Componentes do WSL atualizados." -ForegroundColor Green
      }
    }

    Write-Host "üõ†Ô∏è Definindo WSL2 como a vers√£o padr√£o para novas distribui√ß√µes..." -ForegroundColor Yellow
    wsl --set-default-version 2 | Out-Null
    if ($LASTEXITCODE -ne 0) {
      Write-Host "üõë ERRO: Falha ao definir WSL2 como vers√£o padr√£o. C√≥digo: $LASTEXITCODE" -ForegroundColor Red
      Write-Host "‚ÑπÔ∏è Verifique se o WSL foi instalado corretamente e se a virtualiza√ß√£o est√° habilitada na BIOS." -ForegroundColor Yellow
      exit 1
    }
    Write-Host "‚úÖ WSL2 definido como a vers√£o padr√£o." -ForegroundColor Green
        
  }
  catch {
    Write-Host "üõë ERRO: Falha ao configurar o WSL2: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "‚ÑπÔ∏è Tente executar o script novamente ou consulte a documenta√ß√£o do WSL." -ForegroundColor Yellow
    Write-Host "‚ÑπÔ∏è Para mais informa√ß√µes, acesse: https://aka.ms/wsl2kernel" -ForegroundColor Yellow
    exit 1
  }
  
  Write-Host "`n=== üîç VERIFICANDO O STATUS DO WSL === " -ForegroundColor Cyan
  Write-Host "‚ÑπÔ∏è Verificando o status e a vers√£o padr√£o do WSL..." -ForegroundColor Yellow
  try {
    $wslStatusOutput = wsl --status
    if ($LASTEXITCODE -ne 0) {
      Write-Host "‚ö†Ô∏è AVISO: N√£o foi poss√≠vel obter o status detalhado do WSL via 'wsl --status'. C√≥digo: $LASTEXITCODE" -ForegroundColor Yellow
      Write-Host "   Isso pode ocorrer em algumas vers√µes do Windows ou se o WSL n√£o estiver totalmente funcional." -ForegroundColor Yellow
      Write-Host "   Tentando verificar a vers√£o padr√£o de outra forma..." -ForegroundColor Yellow
      $defaultVersionCheck = (wsl --list --verbose) | Select-String "^\*\s"
      if ($defaultVersionCheck -match "VERSION\s+2") {
        Write-Host "‚úÖ Vers√£o padr√£o do WSL parece ser 2 (verificado via wsl --list --verbose)." -ForegroundColor Green
      }
      else {
        Write-Host "‚ö†Ô∏è N√£o foi poss√≠vel confirmar se a vers√£o padr√£o do WSL √© 2." -ForegroundColor Yellow
      }
    }
    else {
      if ($wslStatusOutput -match "2") {
        Write-Host "‚úÖ WSL2 est√° instalado e configurado corretamente como padr√£o." -ForegroundColor Green
      }
      else {
        Write-Host "‚ö†Ô∏è A vers√£o padr√£o do WSL n√£o parece ser 2 ou n√£o p√¥de ser confirmada pelo 'wsl --status'." -ForegroundColor Yellow
        Write-Host "   Verifique a sa√≠da acima. Se o WSL foi instalado/atualizado agora, pode ser necess√°rio reiniciar." -ForegroundColor Yellow
      }
    }
  }
  catch {
    Write-Host "üõë ERRO: N√£o foi poss√≠vel verificar o status do WSL: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
  }
  Write-Host "üéâ Verifica√ß√£o de pr√©-requisitos e configura√ß√£o do WSL2 conclu√≠da." -ForegroundColor Green
}